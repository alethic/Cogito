<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Activities;
using System.Diagnostics.Contracts;

namespace Cogito.Activities
{

    public static partial class Expressions
    {

        public static ActivityAction Delegate(Func<Activity> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            return new ActivityAction()
            {
                Handler = create(),
            };
        }

        public static ActivityAction<TArg> Delegate<TArg>(Func<InArgument<TArg>, Activity> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            var arg = new DelegateInArgument<TArg>();

            return new ActivityAction<TArg>()
            {
                Argument = arg,
                Handler = create(arg),
            };
        }

<#
for (int i = 2; i <= 8; i++)
{
#>
        public static ActivityAction<<#= Repeat("TArg{0}", i, ", ") #>> Delegate<<#= Repeat("TArg{0}", i, ", ") #>>(Func<<#= Repeat("InArgument<TArg{0}>", i, ", ") #>, Activity> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

<#
    for (int j = 1; j <= i; j++)
    {
#>
            var <#= string.Format("arg{0}", j) #> = new DelegateInArgument<<#= string.Format("TArg{0}", j) #>>();
<#
    }
#>

            return new ActivityAction<<#= Repeat("TArg{0}", i, ", ") #>>()
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                Argument<#= j #> = arg<#= j #>,
<#
    }
#>
                Handler = create(<#= Repeat("arg{0}", i, ", ") #>),
            };
        }

<#
}
#>

        public static ActivityFunc<TResult> Delegate<TResult>(Func<OutArgument<TResult>, Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            var result = new DelegateOutArgument<TResult>();

            return new ActivityFunc<TResult>()
            {
                Result = result,
                Handler = create(result),
            };
        }

        public static ActivityFunc<TArg, TResult> Delegate<TArg, TResult>(Func<InArgument<TArg>, OutArgument<TResult>, Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            var arg = new DelegateInArgument<TArg>();
            var result = new DelegateOutArgument<TResult>();

            return new ActivityFunc<TArg, TResult>()
            {
                Argument = arg,
                Result = result,
                Handler = create(arg, result),
            };
        }

<#
for (int i = 2; i <= 8; i++)
{
#>
        public static ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult> Delegate<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(Func<<#= Repeat("InArgument<TArg{0}>", i, ", ") #>, OutArgument<TResult>, Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

<#
    for (int j = 1; j <= i; j++)
    {
#>
            var <#= string.Format("arg{0}", j) #> = new DelegateInArgument<<#= string.Format("TArg{0}", j) #>>();
<#
    }
#>
            var result = new DelegateOutArgument<TResult>();

            return new ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult>()
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                Argument<#= j #> = arg<#= j #>,
<#
    }
#>
                Result = result,
                Handler = create(<#= Repeat("arg{0}", i, ", ") #>, result),
            };
        }

<#
}
#>

        public static ActivityFunc<TResult> Delegate<TResult>(Func<Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            var result = new DelegateOutArgument<TResult>();
            var action = create();
            action.Result = result;

            return new ActivityFunc<TResult>()
            {
                Result = result,
                Handler = action,
            };
        }

        public static ActivityFunc<TArg, TResult> Delegate<TArg, TResult>(Func<InArgument<TArg>, Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

            var arg = new DelegateInArgument<TArg>();
            var result = new DelegateOutArgument<TResult>();
            var action = create(arg);
            action.Result = result;

            return new ActivityFunc<TArg, TResult>()
            {
                Argument = arg,
                Result = result,
                Handler = action,
            };
        }

<#
for (int i = 2; i <= 8; i++)
{
#>
        public static ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult> Delegate<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(Func<<#= Repeat("InArgument<TArg{0}>", i, ", ") #>, Activity<TResult>> create)
        {
            Contract.Requires<ArgumentNullException>(create != null);

<#
    for (int j = 1; j <= i; j++)
    {
#>
            var <#= string.Format("arg{0}", j) #> = new DelegateInArgument<<#= string.Format("TArg{0}", j) #>>();
<#
    }
#>
            var result = new DelegateOutArgument<TResult>();
            var action = create(<#= Repeat("arg{0}", i, ", ") #>);
            action.Result = result;

            return new ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult>()
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                Argument<#= j #> = arg<#= j #>,
<#
    }
#>
                Result = result,
                Handler = action,
            };
        }

<#
}
#>
    }

}

<#+

string Repeat(string format, int count, string separator)
{
    return string.Join(separator, Enumerable.Range(1, count).Select(i => string.Format(format , i)));
}

#>
