<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_.t4" #>
using System;
using System.Activities;
using System.Activities.Statements;
using System.Diagnostics.Contracts;

namespace Cogito.Activities
{

    public static partial class Expressions
    {

<#
for (int i = 2; i <= 8; i++)
{
    foreach (var argTypeName in new [] { "InArgument<TArg{0}>", "DelegateInArgument<TArg{0}>", "Activity<TArg{0}>", "Variable<TArg{0}>" })
    {
#>
        /// <summary>
        /// Returns an <see cref="Activity"/> that invokes the action with the specified arguments.
        /// </summary>
<# WriteArgTypeParamsComments(i); #>
        /// <param name="action"></param>
<# WriteArgParamsComments(i); #>
        /// <param name="displayName"></param>
        /// <returns></returns>
        public static InvokeAction<<#= Repeat("TArg{0}", i, ", ") #>> InvokeAction<<#= Repeat("TArg{0}", i, ", ") #>>(ActivityAction<<#= Repeat("TArg{0}", i, ", ") #>> action, <#= Repeat(argTypeName + " arg{0}", i, ", ") #>, string displayName = null)
        {
            Contract.Requires<ArgumentNullException>(action != null);
<#
        for (int j = 1; j <= i; j++)
        {
#>
            Contract.Requires<ArgumentNullException>(arg<#= j #> != null);
<#
        }
#>
            
            return new InvokeAction<<#= Repeat("TArg{0}", i, ", ") #>>()
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                Argument<#= j #> = arg<#= j #>,
<#
    }
#>
                Action = action,
            };
        }

<#
    }
}
#>
    }

}
