<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Activities;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace Cogito.Activities
{
<#
for (int i = 1; i <= 8; i++)
{
#>
    /// <summary>
    /// Provides an <see cref="Activity"/> that executes the given action with <#= i #> arguments.
    /// </summary>
    public class ActionActivity<<#= Repeat("TArg{0}", i, ", ") #>> :
        AsyncTaskCodeActivity
    {
    
        /// <summary>
        /// Converts a <see cref="ActionActivity{<#= Repeat("TArg{0}", i, ", ") #>}"/> to a <see cref="ActivityAction{<#= Repeat("TArg{0}", i, ", ") #>}"/>.
        /// </summary>
        /// <param name="activity"></param>
        public static implicit operator ActivityAction<<#= Repeat("TArg{0}", i, ", ") #>>(ActionActivity<<#= Repeat("TArg{0}", i, ", ") #>> activity)
        {
            return Expressions.Delegate<<#= Repeat("TArg{0}", i, ", ") #>>((<#= Repeat("arg{0}", i, ", ") #>) =>
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                activity.Argument<#= j #> = arg<#= j #>;
<#
    }
#>
                return activity;
            });
        }
        
    
        /// <summary>
        /// Converts a <see cref="ActionActivity{<#= Repeat("TArg{0}", i, ", ") #>}"/> to a <see cref="ActivityDelegate"/>.
        /// </summary>
        /// <param name="activity"></param>
        public static implicit operator ActivityDelegate(ActionActivity<<#= Repeat("TArg{0}", i, ", ") #>> activity)
        {
            return Expressions.Delegate<<#= Repeat("TArg{0}", i, ", ") #>>((<#= Repeat("arg{0}", i, ", ") #>) =>
            {
                return activity;
            });
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public ActionActivity()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="action"></param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
<#
    }
#>
        public ActionActivity(Action<<#= Repeat("TArg{0}", i, ", ") #>> action = null, <#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>)
        {
            Action = action;
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #>;
<#
    }
#>
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="action"></param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
<#
    }
#>
        public ActionActivity(<#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, Action<<#= Repeat("TArg{0}", i, ", ") #>> action = null)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #>;
<#
    }
#>
            Action = action;
        }

        /// <summary>
        /// Gets or sets the action to be invoked.
        /// </summary>
        [RequiredArgument]
        public Action<<#= Repeat("TArg{0}", i, ", ") #>> Action { get; set; }

<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <summary>
        /// Argument to send to action.
        /// </summary>
        [RequiredArgument]
        public InArgument<TArg<#= j #>> Argument<#= j #> { get; set; }

<#
    }
#>
        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="executor"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        protected override Task ExecuteAsync(AsyncCodeActivityContext context, Func<Func<Task>, Task> executor)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            var arg<#= j #> = Argument<#= j #>.Get(context);
<#
    }
#>
            return executor(() => { Action(<#= Repeat("arg{0}", i, ", ") #>); return Task.FromResult(true); });
        }

    }

<#
}
#>

}

<#+

string Repeat(string format, int count, string separator)
{
    return string.Join(separator, Enumerable.Range(1, count).Select(i => string.Format(format , i)));
}

void WriteTypeParamsComments(int count)
{
    for (int i = 1; i <= count; i++)
    {
        WriteLine("/// <typeparam name=\"TArg" + i + "\"></typeparam>");
    }
}

void WriteArgParamsComments(int count)
{
    for (int i = 1; i <= count; i++)
    {
        WriteLine("/// <param name=\"arg" + i + "\"></param>");
    }
}

#>
