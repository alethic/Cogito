<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Activities;

using Cogito.Threading;

namespace Cogito.Activities
{

<#
for (int i = 1; i <= 8; i++)
{
#>

    /// <summary>
    /// Provides an <see cref="Activity"/> that executes the given function with <#= i #> arguments.
    /// </summary>
    public class FuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> :
        NativeActivity<TResult>
    {

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public FuncActivity()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="func"></param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
        /// <param name="result"></param>
<#
    }
#>
        public FuncActivity(Func<<#= Repeat("TArg{0}", i, ", ") #>, TResult> func = null, <#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, OutArgument<TResult> result = null)
        {
            Func = func;
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #> ?? new InArgument<TArg<#= j #>>(default(TArg<#= j #>));
<#
    }
#>
            Result = result;
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
        /// <param name="result"></param>
<#
    }
#>
        /// <param name="func"></param>
        public FuncActivity(<#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, OutArgument<TResult> result = null, Func<<#= Repeat("TArg{0}", i, ", ") #>, TResult> func = null)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #> ?? new InArgument<TArg<#= j #>>(default(TArg<#= j #>));
<#
    }
#>
            Result = result;
            Func = func;
        }

        /// <summary>
        /// Gets or sets the function to be invoked.
        /// </summary>
        public Func<<#= Repeat("TArg{0}", i, ", ") #>, TResult> Func { get; set; }

<#
for (int j = 1; j <= i; j++)
{
#>
        /// <summary>
        /// Argument to send to function.
        /// </summary>
        [RequiredArgument]
        public InArgument<TArg<#= j #>> Argument<#= j #> { get; set; }

<#
}
#>
        protected override void Execute(NativeActivityContext context)
        {
            Result.Set(context, Func(<#= Repeat("context.GetValue(Argument{0})", i, ", ") #>));
        }

        protected override void CacheMetadata(NativeActivityMetadata metadata)
        {
            base.CacheMetadata(metadata);

            if (Func == null)
                metadata.AddValidationError("Func is required.");
        }

    }

<#
}
#>

}

<#+

string Repeat(string format, int count, string separator)
{
    return string.Join(separator, Enumerable.Range(1, count).Select(i => string.Format(format , i)));
}

#>