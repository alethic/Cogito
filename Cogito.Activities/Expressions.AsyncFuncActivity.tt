<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Activities;
using System.Diagnostics.Contracts;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace Cogito.Activities
{

    public static partial class Expressions
    {

<#
for (int i = 1; i <= 8; i++)
{
    foreach (var argTypeName in new [] { "InArgument<TArg{0}>", "DelegateInArgument<TArg{0}>", "Activity<TArg{0}>" })
    {
#>
        /// <summary>
        /// Returns a <see cref="Activity"/> that executes <paramref name="func"/> with arguments.
        /// </summary>
<# WriteTypeParamsComments(i); #>
        /// <param name="func"></param>
<# WriteArgParamsComments(i); #>
        /// <returns></returns>
        public static AsyncFuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> Invoke<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(Func<<#= Repeat("TArg{0}", i, ", ") #>, Task<TResult>> func, <#= Repeat(argTypeName + " arg{0}", i, ", ") #>, string displayName = null)
        {
            Contract.Requires<ArgumentNullException>(func != null);

            return new AsyncFuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(func, <#= Repeat("arg{0}", i, ", ") #>)
            {
                DisplayName = displayName,
            };
        }
<#
    }
}
#>

    }

<#
for (int i = 1; i <= 8; i++)
{
#>
    /// <summary>
    /// Provides an <see cref="Activity"/> that executes the given asynchronous function with <#= i #> arguments.
    /// </summary>
    public class AsyncFuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> :
        AsyncTaskCodeActivity<TResult>
    {

        public static implicit operator ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(AsyncFuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> activity)
        {
            return Expressions.Delegate<<#= Repeat("TArg{0}", i, ", ") #>, TResult>((<#= Repeat("arg{0}", i, ", ") #>) =>
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                activity.Argument<#= j #> = arg<#= j #>;
<#
    }
#>
                return activity;
            });
        }

        public static implicit operator ActivityDelegate(AsyncFuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> activity)
        {
            return activity;
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public AsyncFuncActivity()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="func"></param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
<#
    }
#>
        /// <param name="result"></param>
        public AsyncFuncActivity(Func<<#= Repeat("TArg{0}", i, ", ") #>, Task<TResult>> func = null, <#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, OutArgument<TResult> result = null)
        {
            Func = func;
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #> ?? new InArgument<TArg<#= j #>>(default(TArg<#= j #>));
<#
    }
#>
            Result = result;
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
<#
    }
#>
        /// <param name="result"></param>
        /// <param name="func"></param>
        public AsyncFuncActivity(<#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, OutArgument<TResult> result = null, Func<<#= Repeat("TArg{0}", i, ", ") #>, Task<TResult>> func = null)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #> ?? new InArgument<TArg<#= j #>>(default(TArg<#= j #>));
<#
    }
#>
            Result = result;
            Func = func;
        }

        /// <summary>
        /// Gets or sets the function to be invoked.
        /// </summary>
        [RequiredArgument]
        public Func<<#= Repeat("TArg{0}", i, ", ") #>, Task<TResult>> Func { get; set; }

<#
for (int j = 1; j <= i; j++)
{
#>
        /// <summary>
        /// Argument to send to function.
        /// </summary>
        [RequiredArgument]
        public InArgument<TArg<#= j #>> Argument<#= j #> { get; set; }

<#
}
#>
        protected override Task<TResult> ExecuteAsync(AsyncCodeActivityContext context, Func<Func<Task<TResult>>, Task<TResult>> executor)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            var arg<#= j #> = Argument<#= j #>.Get(context);
<#
    }
#>
            return executor(() => Func(<#= Repeat("arg{0}", i, ", ") #>));
        }

    }
    
<#
}
#>

}

<#+

string Repeat(string format, int count, string separator)
{
    return string.Join(separator, Enumerable.Range(1, count).Select(i => string.Format(format , i)));
}

void WriteTypeParamsComments(int count)
{
    for (int i = 1; i <= count; i++)
    {
        WriteLine("/// <typeparam name=\"TArg" + i + "\"></typeparam>");
    }
}

void WriteArgParamsComments(int count)
{
    for (int i = 1; i <= count; i++)
    {
        WriteLine("/// <param name=\"arg" + i + "\"></param>");
    }
}

#>