<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_.t4" #>
using System;
using System.Activities;
using System.Activities.Statements;
using System.Threading.Tasks;

namespace Cogito.Activities
{

    public static partial class Expressions
    {

<#
for (int i = 1; i <= 8; i++)
{
    foreach (var argTypeName in new [] { "InArgument<TArg{0}>", "DelegateInArgument<TArg{0}>", "Activity<TArg{0}>" })
    {
#>
        /// <summary>
        /// Throws a <typeparam name="TException"/>.
        /// </summary>
        /// <param name="exception"></param>
        /// <returns></returns>
        public static Throw Throw<<#= Repeat("TArg{0}", i, ", ") #>, TException>(Func<<#= Repeat("TArg{0}", i, ", ") #>, Task<TException>> func, <#= Repeat(argTypeName + " arg{0}", i, ", ") #>, string displayName = null)
            where TException : Exception
        {
            if (func == null)
                throw new ArgumentNullException(nameof(func));
<#
        for (int j = 1; j <= i; j++)
        {
#>
            if (arg<#= j #> == null)
                throw new ArgumentNullException(nameof(arg<#= j #>));
<#
        }
#>

            return Throw(Invoke<<#= Repeat("TArg{0}", i, ", ") #>, TException>(func, <#= Repeat("arg{0}", i, ", ") #>, displayName), displayName);
        }

<#
    }
}
#>
    }

}
