<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="_.t4" #>
using System;
using System.Activities;
using System.Threading.Tasks;

namespace Cogito.Activities
{

<#
for (int i = 1; i <= 8; i++)
{
#>
    /// <summary>
    /// Provides an <see cref="Activity"/> that executes the given function with <#= i #> arguments.
    /// </summary>
    public class FuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> :
        AsyncTaskCodeActivity<TResult>
    {

        public static implicit operator ActivityFunc<<#= Repeat("TArg{0}", i, ", ") #>, TResult>(FuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> activity)
        {
            return activity != null ? Expressions.Delegate<<#= Repeat("TArg{0}", i, ", ") #>, TResult>((<#= Repeat("arg{0}", i, ", ") #>) =>
            {
<#
    for (int j = 1; j <= i; j++)
    {
#>
                activity.Argument<#= j #> = arg<#= j #>;
<#
    }
#>
                return activity;
            }) : null;
        }

        public static implicit operator ActivityDelegate(FuncActivity<<#= Repeat("TArg{0}", i, ", ") #>, TResult> activity)
        {
            return activity;
        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        public FuncActivity()
        {

        }

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="func"></param>
<#
    for (int j = 1; j <= i; j++)
    {
#>
        /// <param name="arg<#= j #>"></param>
<#
    }
#>
        /// <param name="result"></param>
        public FuncActivity(Func<<#= Repeat("TArg{0}", i, ", ") #>, TResult> func = null, <#= Repeat("InArgument<TArg{0}> arg{0} = null", i, ", ") #>, OutArgument<TResult> result = null)
        {
            Func = func;
<#
    for (int j = 1; j <= i; j++)
    {
#>
            Argument<#= j #> = arg<#= j #>;
<#
    }
#>
            Result = result;
        }

        /// <summary>
        /// Gets or sets the function to be invoked.
        /// </summary>
        public Func<<#= Repeat("TArg{0}", i, ", ") #>, TResult> Func { get; set; }

<#
for (int j = 1; j <= i; j++)
{
#>
        /// <summary>
        /// Argument to send to function.
        /// </summary>
        [RequiredArgument]
        public InArgument<TArg<#= j #>> Argument<#= j #> { get; set; }

<#
}
#>
        /// <summary>
        /// Executes the function.
        /// </summary>
        /// <param name="executor"></param>
        /// <param name="context"></param>
        /// <returns></returns>
        protected override Task<TResult> ExecuteAsync(AsyncCodeActivityContext context, AsyncTaskExecutor executor)
        {
<#
    for (int j = 1; j <= i; j++)
    {
#>
            var arg<#= j #> = Argument<#= j #>.Get(context);
<#
    }
#>
            return Func != null ? executor.ExecuteAsync(() => Task.FromResult(Func(<#= Repeat("arg{0}", i, ", ") #>))) : null;
        }

    }

<#
}
#>

}
