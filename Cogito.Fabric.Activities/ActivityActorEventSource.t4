<#+
string[] eLevels = new[] { "Verbose", "Informational", "Warning", "Error" };
string[] tLevels = new[] { "Verbose", "Info", "Warning", "Error" };
#>

<#+

class RecordType
{

    public RecordType(int eventIdBase, Type type, string name, string[] keywords, Arg[] args)
    {
        EventIdBase = eventIdBase;
        Type = type;
        Name = name;
        Keywords = keywords;
        Args = args;
    }

    public int EventIdBase { get; set; }

    public Type Type { get; set; }

    public string Name { get; set; }

    public string[] Keywords { get; set; }

    public Arg[] Args { get; set; }

}

class Arg
{

    public Arg(string type, string name, string expr)
    {
        Type = type;
        Name = name;
        Expr = expr;
    }

    public string Type { get; set; }

    public string Name { get; set; }

    public string Expr { get; set; }

}


RecordType[] recordTypes = new[]
{
    new RecordType(10, typeof(ActivityScheduledRecord), "ActivityScheduled", new[] { "ActivityScheduled" }, new[] 
    {
        new Arg("string", "activityName", "record.Activity?.Name"),
        new Arg("string", "activityId", "record.Activity?.Id"),
        new Arg("string", "activityInstanceId", "record.Activity?.InstanceId"),
        new Arg("string", "activityTypeName", "record.Activity?.TypeName")
    }),
    new RecordType(20, typeof(ActivityStateRecord), "ActivityState", new[] { "ActivityState" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "activityName", "record.Activity?.Name"),
        new Arg("string", "activityId", "record.Activity?.Id"),
        new Arg("string", "activityInstanceId", "record.Activity?.InstanceId"),
        new Arg("string", "activityTypeName", "record.Activity?.TypeName"),
        new Arg("string", "arguments", "PrepareDictionary(record.Arguments)"),
        new Arg("string", "variables", "PrepareDictionary(record.Variables)"),
    }),
    new RecordType(30, typeof(BookmarkResumptionRecord), "BookmarkResumption", new[] { "BookmarkResumption" }, new[]
    {
        new Arg("string", "bookmarkName", "record.BookmarkName"),
        new Arg("Guid", "bookmarkScope", "record.BookmarkScope"),
        new Arg("string", "payload", "null"),
    }),
    new RecordType(40, typeof(CancelRequestedRecord), "CancelRequested", new[] { "CancelRequested" }, new[] 
    {
        new Arg("string", "activityName", "record.Activity?.Name"),
        new Arg("string", "activityId", "record.Activity?.Id"),
        new Arg("string", "activityInstanceId", "record.Activity?.InstanceId"),
        new Arg("string", "activityTypeName", "record.Activity?.TypeName")
    }),
    new RecordType(50, typeof(FaultPropagationRecord), "FaultPropagation", new[] { "FaultPropagation" }, new[]
    {
        new Arg("string", "faultMessage", "record.Fault?.Message"),
        new Arg("string", "faultSourceName", "record.FaultSource?.Name"),
        new Arg("string", "faultSourceId", "record.FaultSource?.Id"),
        new Arg("string", "faultSourceInstanceId", "record.FaultSource?.InstanceId"),
        new Arg("string", "faultSourceTypeName", "record.FaultSource?.TypeName"),
        new Arg("string", "faultHandlerName", "record.FaultHandler?.Name"),
        new Arg("string", "faultHandlerId", "record.FaultHandler?.Id"),
        new Arg("string", "faultHandlerInstanceId", "record.FaultHandler?.InstanceId"),
        new Arg("string", "faultHandlerTypeName", "record.FaultHandler?.TypeName"),
    }),
    new RecordType(60, typeof(WorkflowInstanceRecord), "WorkflowInstance", new[] { "WorkflowInstance" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
    }),
    new RecordType(70, typeof(WorkflowInstanceAbortedRecord), "WorkflowInstanceAborted", new[] { "WorkflowInstance", "WorkflowInstanceAborted" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
        new Arg("string", "reason", "record.Reason"),
    }),
    new RecordType(80, typeof(WorkflowInstanceSuspendedRecord), "WorkflowInstanceSuspended", new[] { "WorkflowInstance", "WorkflowInstanceSuspended" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
        new Arg("string", "reason", "record.Reason"),
    }),
    new RecordType(90, typeof(WorkflowInstanceTerminatedRecord), "WorkflowInstanceTerminated", new[] { "WorkflowInstance", "WorkflowInstanceTerminated" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
        new Arg("string", "reason", "record.Reason"),
    }),
    new RecordType(100, typeof(WorkflowInstanceUnhandledExceptionRecord), "WorkflowInstanceUnhandledException", new[] { "WorkflowInstance", "WorkflowInstanceUnhandledException" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
        new Arg("string", "faultSourceName", "record.FaultSource?.Name"),
        new Arg("string", "faultSourceId", "record.FaultSource?.Id"),
        new Arg("string", "faultSourceInstanceId", "record.FaultSource?.InstanceId"),
        new Arg("string", "faultSourceTypeName", "record.FaultSource?.TypeName"),
        new Arg("string", "exception", "record.UnhandledException?.Message"),
    }),
    new RecordType(110, typeof(WorkflowInstanceUpdatedRecord), "WorkflowInstanceUpdated", new[] { "WorkflowInstance", "WorkflowInstanceUpdated" }, new[]
    {
        new Arg("string", "state", "record.State"),
        new Arg("string", "workflowDefinitionIdentityName", "record.WorkflowDefinitionIdentity?.Name"),
        new Arg("string", "activityDefinitionId", "record.ActivityDefinitionId"),
        new Arg("bool", "isSuccessful", "record.IsSuccessful"),
    }),
    new RecordType(200, typeof(CustomTrackingRecord), "CustomTracking", new[] { "CustomTracking" }, new[]
    {
        new Arg("string", "name", "record.Name"),
        new Arg("string", "activityName", "record.Activity?.Name"),
        new Arg("string", "activityId", "record.Activity?.Id"),
        new Arg("string", "activityInstanceId", "record.Activity?.InstanceId"),
        new Arg("string", "activityTypeName", "record.Activity?.TypeName"),
        new Arg("string", "data", "PrepareDictionary(record.Data)"),
    }),
};

#>

<#+
void GenerateRecord(RecordType recordType)
{
#>

    public partial class ActivityActorEventSource
    {

<#+
    for (int l = 0; l < eLevels.Length; l++)
    {
#>
        const int <#= recordType.Name #><#= tLevels[l] #>EventId = <#= recordType.EventIdBase + l #>;
<#+
    }
#>
        
<#+
    GenerateStatefulRecordMethod(recordType);
    GenerateStatelessRecordMethod(recordType);
    GenerateEventMethods(recordType);
#>

    }
<#+
}
#>

<#+
void GenerateStatefulRecordMethod(RecordType recordType)
{
#>
        [NonEvent]
        public void <#= recordType.Name #>(IStatefulActivityActorInternal actor, <#= recordType.Type.Name #> record, string message = "", params object[] args)
        {
            if (IsEnabled())
            {
<#+
for (int i = 0; i < tLevels.Length; i++)
{
#>
                if (record.Level == TraceLevel.<#= tLevels[i] #> && IsEnabled(EventLevel.<#= eLevels[i] #>, <#= string.Join(" | ", recordType.Keywords.Select(k => "Keywords." + k)) #>))
                {
                    <#= recordType.Name #><#= tLevels[i] #>(
                        actor.GetType().ToString(),
                        actor.Id.ToString(),
                        actor.ActorService.ServiceInitializationParameters.CodePackageActivationContext.ApplicationTypeName,
                        actor.ActorService.ServiceInitializationParameters.CodePackageActivationContext.ApplicationName,
                        actor.ActorService.ServiceInitializationParameters.ServiceTypeName,
                        actor.ActorService.ServiceInitializationParameters.ServiceName.ToString(),
                        actor.ActorService.ServiceInitializationParameters.PartitionId,
                        actor.ActorService.ServiceInitializationParameters.ReplicaId,
                        FabricRuntime.GetNodeContext().NodeName,
                        record.InstanceId,
                        record.RecordNumber,
                        record.EventTime.ToFileTimeUtc(),
                        PrepareAnnotations(record.Annotations),
<#+
    foreach (var arg in recordType.Args)
    {
        if (arg.Type == "string")
        {
#>
                        (<#= arg.Expr #>) ?? string.Empty,
<#+
        }
        else
        {
#>
                        <#= arg.Expr #>,
<#+
        }
    }
#>
                        string.Format(message, args));
                    return;
                }

<#+
}
#>
            }
        }

<#+
}
#>

<#+
void GenerateStatelessRecordMethod(RecordType recordType)
{
#>
        [NonEvent]
        public void <#= recordType.Name #>(IStatelessActivityActorInternal actor, <#= recordType.Type.Name #> record, string message = "", params object[] args)
        {
            if (IsEnabled())
            {
<#+
for (int i = 0; i < tLevels.Length; i++)
{
#>
                if (record.Level == TraceLevel.<#= tLevels[i] #> && IsEnabled(EventLevel.<#= eLevels[i] #>, <#= string.Join(" | ", recordType.Keywords.Select(k => "Keywords." + k)) #>))
                {
                    <#= recordType.Name #><#= tLevels[i] #>(
                        actor.GetType().ToString(),
                        actor.Id.ToString(),
                        actor.ActorService.ServiceInitializationParameters.CodePackageActivationContext.ApplicationTypeName,
                        actor.ActorService.ServiceInitializationParameters.CodePackageActivationContext.ApplicationName,
                        actor.ActorService.ServiceInitializationParameters.ServiceTypeName,
                        actor.ActorService.ServiceInitializationParameters.ServiceName.ToString(),
                        actor.ActorService.ServiceInitializationParameters.PartitionId,
                        actor.ActorService.ServiceInitializationParameters.InstanceId,
                        FabricRuntime.GetNodeContext().NodeName,
                        record.InstanceId,
                        record.RecordNumber,
                        record.EventTime.ToFileTimeUtc(),
                        PrepareAnnotations(record.Annotations),
<#+
    foreach (var arg in recordType.Args)
    {
        if (arg.Type == "string")
        {
#>
                        (<#= arg.Expr #>) ?? string.Empty,
<#+
        }
        else
        {
#>
                        <#= arg.Expr #>,
<#+
        }
    }
#>
                        string.Format(message, args));
                    return;
                }

<#+
}
#>
            }
        }

<#+
}
#>

<#+
void GenerateEventMethods(RecordType recordType)
{
    for (int l = 0; l < eLevels.Length; l++)
    {
#>

        [Event(
            <#= recordType.Name #><#= tLevels[l] #>EventId, 
            Level = EventLevel.<#= eLevels[l] #>, 
            Message = "{<#= recordType.Args.Length + 13 #>}", 
            Keywords = <#= string.Join(" | ", recordType.Keywords.Select(k => "Keywords." + k)) #>)]
        public void <#= recordType.Name #><#= tLevels[l] #>(
            string actorType,
            string actorId,
            string applicationTypeName,
            string applicationName,
            string serviceTypeName,
            string serviceName,
            Guid partitionId,
            long replicaOrInstanceId,
            string nodeName,
            Guid instanceId,
            long recordNumber,
            long eventTime,
            string annotations,
<#+
        foreach (var arg in recordType.Args)
        {
#>
            <#= arg.Type #> <#= arg.Name #>,
<#+
        }
#>
            string message)
        {
            WriteEvent(
                <#= recordType.Name #><#= tLevels[l] #>EventId,
                actorType,
                actorId,
                applicationTypeName,
                applicationName,
                serviceTypeName,
                serviceName,
                partitionId,
                replicaOrInstanceId,
                nodeName,
                instanceId,
                recordNumber,
                eventTime,
                annotations,
<#+
        foreach (var arg in recordType.Args)
        {
#>
                <#= arg.Name #>,
<#+
        }
#>
                message);
        }

<#+
    }
}
#>
